// Code generated by raf using Material interface.
// - Namespace: 01987547fc6c72ecb453bd2736bd4ea0.
// - Entity Name: speaker_queue.
// - Entity ID: 102019a1d99a402732caa7191639ec3c273.
// - Entity Version: 102019a1dbcbce7723a8fcbc902bf548690.
// - Task ID: 68fd5f5b822475ee4330a749.
// - Task Root ID: 68fd5593b7797f696b910611.

import { DataType } from "./common";
import type { Value, Page, Index, Filter, Sort, Data } from "./common";
import { DataStoreClient, CreateData, CreateValue, ParseValue } from "./client";







/**
 * Enumeration for SpeakerQueueProcessingStatus
 */
export enum SpeakerQueueProcessingStatus {
  Unspecified = 0,
  Pending = 1,
  Processing = 2,
  Processed = 3,
  Failed = 4,
}



/**
 * Interface for SpeakerQueueModel
 * `id`, `data_creator`, `data_updater`, `create_time`, `update_time` should not be set when INSERTING data since backend will fill it automatically.
 * `id` should keep the original value when setting (updating) data.
 * `data_creator` and `data_updater` are read-only strings (user id) representing the creator and updater of the data record.
 * `create_time` and `update_time` are read-only strings in the format of timestamp (10-digit).
 */
export interface SpeakerQueueModel {
  id: string;
  data_creator: string;
  data_updater: string;
  create_time: string;
  update_time: string;
  user_session_id: string;
  speaker_id: string;
  statement_text: string;
  statement_timestamp: string;
  processing_status: SpeakerQueueProcessingStatus;
}

/**
 * ORM class for SpeakerQueue entity.
 * It uses Singleton pattern to prevent re-initialization.
 */
export class SpeakerQueueORM {
  private static instance: SpeakerQueueORM | null = null;
  protected client: DataStoreClient;
  protected namespace: string;
  protected entityId: string;
  protected entityName: string;
  protected entityVersion: string;
  protected taskId: string;
  protected taskRootId: string;

  private constructor() {
    this.client = DataStoreClient.getInstance();
    this.namespace = '01987547fc6c72ecb453bd2736bd4ea0';
    this.entityId = '102019a1d99a402732caa7191639ec3c273';
    this.entityName = 'speaker_queue';
    this.entityVersion = '102019a1dbcbce7723a8fcbc902bf548690';
    this.taskId = '68fd5f5b822475ee4330a749';
    this.taskRootId = '68fd5593b7797f696b910611';
  }

  /**
   * Get singleton instance of SpeakerQueueORM
   */
  public static getInstance(): SpeakerQueueORM {
    if (!SpeakerQueueORM.instance) {
      SpeakerQueueORM.instance = new SpeakerQueueORM();
    }
    
    return SpeakerQueueORM.instance;
  }

  /**
   * Get all SpeakerQueue records
   * This returns all data without pagination.
   * To query data with page and filter conditions, use `list*()` instead.
   */
  async getAllSpeakerQueue(): Promise<SpeakerQueueModel[]> {
    const response = await this.client.all({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      format: {
        structured: true
      }
    });
    return this.resultToData(response.data?.values || []);
  }

  /**
   * Insert (create) new SpeakerQueue record(s)
   * DO NOT SET `id`, `data_creator`, `data_updater`, `create_time` and `update_time` since backend will fill it automatically.
   * It will respond the inserted record(s), with `id`, `data_creator`, `data_updater`, `create_time` and `update_time` filled by backend.
   */
  async insertSpeakerQueue(data: SpeakerQueueModel[]): Promise<SpeakerQueueModel[]> {
    const structured = data.map((item) => CreateData(SpeakerQueueModelToValues(item)));
    const response = await this.client.insert({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      batch: structured,
      format: {
        structured: true
      }
    });
    return this.resultToData(response.data?.values || []);
  }

  /**
   * Purge all SpeakerQueue records
   */
  async purgeAllSpeakerQueue(): Promise<void> {
    await this.client.purge({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      format: {
        structured: true
      }
    });
  }

  /**
   * List SpeakerQueue records with filters
   * This function provides search capabilities like filtering, sorting, pagination.
   */
  async listSpeakerQueue(filter?: Filter, sort?: Sort, paginate?: Page): Promise<[SpeakerQueueModel[], Page]> {
    const response = await this.client.list({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      filter: filter,
      sort: sort,
      paginate: paginate,
      format: {
        structured: true
      }
    });
    return [this.resultToData(response.data?.values || []), response.data?.page || { number: 0, size: 0 }];
  }


  /**
   * Get speaker_queue by Id index
   * This function gets data by index.
   */
  async getSpeakerQueueById(
    id: string,
  ): Promise<SpeakerQueueModel[]> {
    const index = createIndexId(
      id
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) speaker_queue by Id index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setSpeakerQueueById(
    id: string,
    data: SpeakerQueueModel
  ): Promise<SpeakerQueueModel[]> {
    const index = createIndexId(
      id
    );

    const values = SpeakerQueueModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete speaker_queue by Id index
   */
  async deleteSpeakerQueueById(
    id: string
  ): Promise<void> {
    const index = createIndexId(
      id
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get speaker_queue by DataCreator index
   * This function gets data by index.
   */
  async getSpeakerQueueByDataCreator(
    data_creator: string,
  ): Promise<SpeakerQueueModel[]> {
    const index = createIndexDataCreator(
      data_creator
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) speaker_queue by DataCreator index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setSpeakerQueueByDataCreator(
    data_creator: string,
    data: SpeakerQueueModel
  ): Promise<SpeakerQueueModel[]> {
    const index = createIndexDataCreator(
      data_creator
    );

    const values = SpeakerQueueModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete speaker_queue by DataCreator index
   */
  async deleteSpeakerQueueByDataCreator(
    data_creator: string
  ): Promise<void> {
    const index = createIndexDataCreator(
      data_creator
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get speaker_queue by DataUpdater index
   * This function gets data by index.
   */
  async getSpeakerQueueByDataUpdater(
    data_updater: string,
  ): Promise<SpeakerQueueModel[]> {
    const index = createIndexDataUpdater(
      data_updater
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) speaker_queue by DataUpdater index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setSpeakerQueueByDataUpdater(
    data_updater: string,
    data: SpeakerQueueModel
  ): Promise<SpeakerQueueModel[]> {
    const index = createIndexDataUpdater(
      data_updater
    );

    const values = SpeakerQueueModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete speaker_queue by DataUpdater index
   */
  async deleteSpeakerQueueByDataUpdater(
    data_updater: string
  ): Promise<void> {
    const index = createIndexDataUpdater(
      data_updater
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get speaker_queue by UserSessionId index
   * This function gets data by index.
   */
  async getSpeakerQueueByUserSessionId(
    user_session_id: string,
  ): Promise<SpeakerQueueModel[]> {
    const index = createIndexUserSessionId(
      user_session_id
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) speaker_queue by UserSessionId index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setSpeakerQueueByUserSessionId(
    user_session_id: string,
    data: SpeakerQueueModel
  ): Promise<SpeakerQueueModel[]> {
    const index = createIndexUserSessionId(
      user_session_id
    );

    const values = SpeakerQueueModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete speaker_queue by UserSessionId index
   */
  async deleteSpeakerQueueByUserSessionId(
    user_session_id: string
  ): Promise<void> {
    const index = createIndexUserSessionId(
      user_session_id
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get speaker_queue by StatementTimestamp index
   * This function gets data by index.
   */
  async getSpeakerQueueByStatementTimestamp(
    statement_timestamp: string,
  ): Promise<SpeakerQueueModel[]> {
    const index = createIndexStatementTimestamp(
      statement_timestamp
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) speaker_queue by StatementTimestamp index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setSpeakerQueueByStatementTimestamp(
    statement_timestamp: string,
    data: SpeakerQueueModel
  ): Promise<SpeakerQueueModel[]> {
    const index = createIndexStatementTimestamp(
      statement_timestamp
    );

    const values = SpeakerQueueModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete speaker_queue by StatementTimestamp index
   */
  async deleteSpeakerQueueByStatementTimestamp(
    statement_timestamp: string
  ): Promise<void> {
    const index = createIndexStatementTimestamp(
      statement_timestamp
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get speaker_queue by ProcessingStatus index
   * This function gets data by index.
   */
  async getSpeakerQueueByProcessingStatus(
    processing_status: SpeakerQueueProcessingStatus,
  ): Promise<SpeakerQueueModel[]> {
    const index = createIndexProcessingStatus(
      processing_status
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) speaker_queue by ProcessingStatus index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setSpeakerQueueByProcessingStatus(
    processing_status: SpeakerQueueProcessingStatus,
    data: SpeakerQueueModel
  ): Promise<SpeakerQueueModel[]> {
    const index = createIndexProcessingStatus(
      processing_status
    );

    const values = SpeakerQueueModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete speaker_queue by ProcessingStatus index
   */
  async deleteSpeakerQueueByProcessingStatus(
    processing_status: SpeakerQueueProcessingStatus
  ): Promise<void> {
    const index = createIndexProcessingStatus(
      processing_status
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }

  /**
   * Convert result data to SpeakerQueueModel data array
   */
  private resultToData(values: Data[]): SpeakerQueueModel[] {
    return values.map((item: Data) => {
      if (item.structured && item.structured.length > 0) {
        return SpeakerQueueModelFromValues(item.structured);
      }

      if (item.serialized) {
        try {
          const parsedData = JSON.parse(item.serialized) as SpeakerQueueModel;
          return parsedData;
        } catch (error) {
          console.error('Error parsing serialized SpeakerQueueModel data: ', error, item.serialized);
          return null;
        }
      }

      return null;
    }).filter((item): item is SpeakerQueueModel => item !== null);
  }
}

/**
 * Convert SpeakerQueueModel data to Value array
 */
function SpeakerQueueModelToValues(data: SpeakerQueueModel): Value[] {
  const fieldMappings = [
    { key: 'id', type: DataType.string, defaultValue: '' },
    { key: 'data_creator', type: DataType.string, defaultValue: '' },
    { key: 'data_updater', type: DataType.string, defaultValue: '' },
    { key: 'create_time', type: DataType.string, defaultValue: '' },
    { key: 'update_time', type: DataType.string, defaultValue: '' },
    { key: 'user_session_id', type: DataType.string, defaultValue: '' },
    { key: 'speaker_id', type: DataType.string, defaultValue: '' },
    { key: 'statement_text', type: DataType.string, defaultValue: '' },
    { key: 'statement_timestamp', type: DataType.string, defaultValue: '' },
    { key: 'processing_status', type: DataType.enumeration, defaultValue: 0 },
  ];

  return fieldMappings.map(({ key, type, defaultValue }) => {
    const value = data[key as keyof SpeakerQueueModel] ?? defaultValue;
    return CreateValue(type, value, key);
  });
}

/**
 * Convert Value array to SpeakerQueueModel data
 */
function SpeakerQueueModelFromValues(values: Value[]): SpeakerQueueModel {
  const data: Partial<SpeakerQueueModel> = {};
  
  for (const value of values) {
    if (!value.name) continue;
    
    switch (value.name) {
      case 'id':
        data.id = ParseValue(value, DataType.string) as string;
        break;
      case 'data_creator':
        data.data_creator = ParseValue(value, DataType.string) as string;
        break;
      case 'data_updater':
        data.data_updater = ParseValue(value, DataType.string) as string;
        break;
      case 'create_time':
        data.create_time = ParseValue(value, DataType.string) as string;
        break;
      case 'update_time':
        data.update_time = ParseValue(value, DataType.string) as string;
        break;
      case 'user_session_id':
        data.user_session_id = ParseValue(value, DataType.string) as string;
        break;
      case 'speaker_id':
        data.speaker_id = ParseValue(value, DataType.string) as string;
        break;
      case 'statement_text':
        data.statement_text = ParseValue(value, DataType.string) as string;
        break;
      case 'statement_timestamp':
        data.statement_timestamp = ParseValue(value, DataType.string) as string;
        break;
      case 'processing_status':
        data.processing_status = ParseValue(value, DataType.enumeration) as SpeakerQueueProcessingStatus;
        break;
    }
  }
  
  return data as SpeakerQueueModel;
}


/**
 * Create index for Id fields
 */
function createIndexId(
  id: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, id, 'id'),
  ];

  return {
    fields: ['id'],
    values
  };
}
/**
 * Create index for DataCreator fields
 */
function createIndexDataCreator(
  data_creator: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, data_creator, 'data_creator'),
  ];

  return {
    fields: ['data_creator'],
    values
  };
}
/**
 * Create index for DataUpdater fields
 */
function createIndexDataUpdater(
  data_updater: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, data_updater, 'data_updater'),
  ];

  return {
    fields: ['data_updater'],
    values
  };
}
/**
 * Create index for UserSessionId fields
 */
function createIndexUserSessionId(
  user_session_id: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, user_session_id, 'user_session_id'),
  ];

  return {
    fields: ['user_session_id'],
    values
  };
}
/**
 * Create index for StatementTimestamp fields
 */
function createIndexStatementTimestamp(
  statement_timestamp: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, statement_timestamp, 'statement_timestamp'),
  ];

  return {
    fields: ['statement_timestamp'],
    values
  };
}
/**
 * Create index for ProcessingStatus fields
 */
function createIndexProcessingStatus(
  processing_status: SpeakerQueueProcessingStatus
): Index {
  const values: Value[] = [
    CreateValue(DataType.enumeration, processing_status, 'processing_status'),
  ];

  return {
    fields: ['processing_status'],
    values
  };
}

export default SpeakerQueueORM;