// Code generated by raf using Material interface.
// - Namespace: 01987547fc6c72ecb453bd2736bd4ea0.
// - Entity Name: declarative_statement.
// - Entity ID: 102019a1d99a4037146b16af84ff2a73dfe.
// - Entity Version: 102019a1dbcbce7723a8fcbc902bf548690.
// - Task ID: 68fd5f5b822475ee4330a749.
// - Task Root ID: 68fd5593b7797f696b910611.

import { DataType } from "./common";
import type { Value, Page, Index, Filter, Sort, Data } from "./common";
import { DataStoreClient, CreateData, CreateValue, ParseValue } from "./client";







/**
 * Enumeration for DeclarativeStatementStatementType
 */
export enum DeclarativeStatementStatementType {
  Unspecified = 0,
  Declarative = 1,
  Opinion = 2,
  Question = 3,
}
/**
 * Enumeration for DeclarativeStatementVerificationStatus
 */
export enum DeclarativeStatementVerificationStatus {
  Unspecified = 0,
  Pending = 1,
  InProgress = 2,
  VerifiedTrue = 3,
  VerifiedFalse = 4,
  Inconclusive = 5,
  Error = 6,
}



/**
 * Interface for DeclarativeStatementModel
 * `id`, `data_creator`, `data_updater`, `create_time`, `update_time` should not be set when INSERTING data since backend will fill it automatically.
 * `id` should keep the original value when setting (updating) data.
 * `data_creator` and `data_updater` are read-only strings (user id) representing the creator and updater of the data record.
 * `create_time` and `update_time` are read-only strings in the format of timestamp (10-digit).
 */
export interface DeclarativeStatementModel {
  id: string;
  data_creator: string;
  data_updater: string;
  create_time: string;
  update_time: string;
  user_session_id: string;
  speaker_id: string;
  original_transcription: string;
  statement_timestamp: string;
  statement_type: DeclarativeStatementStatementType;
  verification_status: DeclarativeStatementVerificationStatus;
}

/**
 * ORM class for DeclarativeStatement entity.
 * It uses Singleton pattern to prevent re-initialization.
 */
export class DeclarativeStatementORM {
  private static instance: DeclarativeStatementORM | null = null;
  protected client: DataStoreClient;
  protected namespace: string;
  protected entityId: string;
  protected entityName: string;
  protected entityVersion: string;
  protected taskId: string;
  protected taskRootId: string;

  private constructor() {
    this.client = DataStoreClient.getInstance();
    this.namespace = '01987547fc6c72ecb453bd2736bd4ea0';
    this.entityId = '102019a1d99a4037146b16af84ff2a73dfe';
    this.entityName = 'declarative_statement';
    this.entityVersion = '102019a1dbcbce7723a8fcbc902bf548690';
    this.taskId = '68fd5f5b822475ee4330a749';
    this.taskRootId = '68fd5593b7797f696b910611';
  }

  /**
   * Get singleton instance of DeclarativeStatementORM
   */
  public static getInstance(): DeclarativeStatementORM {
    if (!DeclarativeStatementORM.instance) {
      DeclarativeStatementORM.instance = new DeclarativeStatementORM();
    }
    
    return DeclarativeStatementORM.instance;
  }

  /**
   * Get all DeclarativeStatement records
   * This returns all data without pagination.
   * To query data with page and filter conditions, use `list*()` instead.
   */
  async getAllDeclarativeStatement(): Promise<DeclarativeStatementModel[]> {
    const response = await this.client.all({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      format: {
        structured: true
      }
    });
    return this.resultToData(response.data?.values || []);
  }

  /**
   * Insert (create) new DeclarativeStatement record(s)
   * DO NOT SET `id`, `data_creator`, `data_updater`, `create_time` and `update_time` since backend will fill it automatically.
   * It will respond the inserted record(s), with `id`, `data_creator`, `data_updater`, `create_time` and `update_time` filled by backend.
   */
  async insertDeclarativeStatement(data: DeclarativeStatementModel[]): Promise<DeclarativeStatementModel[]> {
    const structured = data.map((item) => CreateData(DeclarativeStatementModelToValues(item)));
    const response = await this.client.insert({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      batch: structured,
      format: {
        structured: true
      }
    });
    return this.resultToData(response.data?.values || []);
  }

  /**
   * Purge all DeclarativeStatement records
   */
  async purgeAllDeclarativeStatement(): Promise<void> {
    await this.client.purge({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      format: {
        structured: true
      }
    });
  }

  /**
   * List DeclarativeStatement records with filters
   * This function provides search capabilities like filtering, sorting, pagination.
   */
  async listDeclarativeStatement(filter?: Filter, sort?: Sort, paginate?: Page): Promise<[DeclarativeStatementModel[], Page]> {
    const response = await this.client.list({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      filter: filter,
      sort: sort,
      paginate: paginate,
      format: {
        structured: true
      }
    });
    return [this.resultToData(response.data?.values || []), response.data?.page || { number: 0, size: 0 }];
  }


  /**
   * Get declarative_statement by Id index
   * This function gets data by index.
   */
  async getDeclarativeStatementById(
    id: string,
  ): Promise<DeclarativeStatementModel[]> {
    const index = createIndexId(
      id
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) declarative_statement by Id index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setDeclarativeStatementById(
    id: string,
    data: DeclarativeStatementModel
  ): Promise<DeclarativeStatementModel[]> {
    const index = createIndexId(
      id
    );

    const values = DeclarativeStatementModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete declarative_statement by Id index
   */
  async deleteDeclarativeStatementById(
    id: string
  ): Promise<void> {
    const index = createIndexId(
      id
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get declarative_statement by DataCreator index
   * This function gets data by index.
   */
  async getDeclarativeStatementByDataCreator(
    data_creator: string,
  ): Promise<DeclarativeStatementModel[]> {
    const index = createIndexDataCreator(
      data_creator
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) declarative_statement by DataCreator index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setDeclarativeStatementByDataCreator(
    data_creator: string,
    data: DeclarativeStatementModel
  ): Promise<DeclarativeStatementModel[]> {
    const index = createIndexDataCreator(
      data_creator
    );

    const values = DeclarativeStatementModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete declarative_statement by DataCreator index
   */
  async deleteDeclarativeStatementByDataCreator(
    data_creator: string
  ): Promise<void> {
    const index = createIndexDataCreator(
      data_creator
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get declarative_statement by DataUpdater index
   * This function gets data by index.
   */
  async getDeclarativeStatementByDataUpdater(
    data_updater: string,
  ): Promise<DeclarativeStatementModel[]> {
    const index = createIndexDataUpdater(
      data_updater
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) declarative_statement by DataUpdater index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setDeclarativeStatementByDataUpdater(
    data_updater: string,
    data: DeclarativeStatementModel
  ): Promise<DeclarativeStatementModel[]> {
    const index = createIndexDataUpdater(
      data_updater
    );

    const values = DeclarativeStatementModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete declarative_statement by DataUpdater index
   */
  async deleteDeclarativeStatementByDataUpdater(
    data_updater: string
  ): Promise<void> {
    const index = createIndexDataUpdater(
      data_updater
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get declarative_statement by UserSessionId index
   * This function gets data by index.
   */
  async getDeclarativeStatementByUserSessionId(
    user_session_id: string,
  ): Promise<DeclarativeStatementModel[]> {
    const index = createIndexUserSessionId(
      user_session_id
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) declarative_statement by UserSessionId index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setDeclarativeStatementByUserSessionId(
    user_session_id: string,
    data: DeclarativeStatementModel
  ): Promise<DeclarativeStatementModel[]> {
    const index = createIndexUserSessionId(
      user_session_id
    );

    const values = DeclarativeStatementModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete declarative_statement by UserSessionId index
   */
  async deleteDeclarativeStatementByUserSessionId(
    user_session_id: string
  ): Promise<void> {
    const index = createIndexUserSessionId(
      user_session_id
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get declarative_statement by SpeakerId index
   * This function gets data by index.
   */
  async getDeclarativeStatementBySpeakerId(
    speaker_id: string,
  ): Promise<DeclarativeStatementModel[]> {
    const index = createIndexSpeakerId(
      speaker_id
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) declarative_statement by SpeakerId index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setDeclarativeStatementBySpeakerId(
    speaker_id: string,
    data: DeclarativeStatementModel
  ): Promise<DeclarativeStatementModel[]> {
    const index = createIndexSpeakerId(
      speaker_id
    );

    const values = DeclarativeStatementModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete declarative_statement by SpeakerId index
   */
  async deleteDeclarativeStatementBySpeakerId(
    speaker_id: string
  ): Promise<void> {
    const index = createIndexSpeakerId(
      speaker_id
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get declarative_statement by VerificationStatus index
   * This function gets data by index.
   */
  async getDeclarativeStatementByVerificationStatus(
    verification_status: DeclarativeStatementVerificationStatus,
  ): Promise<DeclarativeStatementModel[]> {
    const index = createIndexVerificationStatus(
      verification_status
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) declarative_statement by VerificationStatus index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setDeclarativeStatementByVerificationStatus(
    verification_status: DeclarativeStatementVerificationStatus,
    data: DeclarativeStatementModel
  ): Promise<DeclarativeStatementModel[]> {
    const index = createIndexVerificationStatus(
      verification_status
    );

    const values = DeclarativeStatementModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete declarative_statement by VerificationStatus index
   */
  async deleteDeclarativeStatementByVerificationStatus(
    verification_status: DeclarativeStatementVerificationStatus
  ): Promise<void> {
    const index = createIndexVerificationStatus(
      verification_status
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }

  /**
   * Convert result data to DeclarativeStatementModel data array
   */
  private resultToData(values: Data[]): DeclarativeStatementModel[] {
    return values.map((item: Data) => {
      if (item.structured && item.structured.length > 0) {
        return DeclarativeStatementModelFromValues(item.structured);
      }

      if (item.serialized) {
        try {
          const parsedData = JSON.parse(item.serialized) as DeclarativeStatementModel;
          return parsedData;
        } catch (error) {
          console.error('Error parsing serialized DeclarativeStatementModel data: ', error, item.serialized);
          return null;
        }
      }

      return null;
    }).filter((item): item is DeclarativeStatementModel => item !== null);
  }
}

/**
 * Convert DeclarativeStatementModel data to Value array
 */
function DeclarativeStatementModelToValues(data: DeclarativeStatementModel): Value[] {
  const fieldMappings = [
    { key: 'id', type: DataType.string, defaultValue: '' },
    { key: 'data_creator', type: DataType.string, defaultValue: '' },
    { key: 'data_updater', type: DataType.string, defaultValue: '' },
    { key: 'create_time', type: DataType.string, defaultValue: '' },
    { key: 'update_time', type: DataType.string, defaultValue: '' },
    { key: 'user_session_id', type: DataType.string, defaultValue: '' },
    { key: 'speaker_id', type: DataType.string, defaultValue: '' },
    { key: 'original_transcription', type: DataType.string, defaultValue: '' },
    { key: 'statement_timestamp', type: DataType.string, defaultValue: '' },
    { key: 'statement_type', type: DataType.enumeration, defaultValue: 0 },
    { key: 'verification_status', type: DataType.enumeration, defaultValue: 0 },
  ];

  return fieldMappings.map(({ key, type, defaultValue }) => {
    const value = data[key as keyof DeclarativeStatementModel] ?? defaultValue;
    return CreateValue(type, value, key);
  });
}

/**
 * Convert Value array to DeclarativeStatementModel data
 */
function DeclarativeStatementModelFromValues(values: Value[]): DeclarativeStatementModel {
  const data: Partial<DeclarativeStatementModel> = {};
  
  for (const value of values) {
    if (!value.name) continue;
    
    switch (value.name) {
      case 'id':
        data.id = ParseValue(value, DataType.string) as string;
        break;
      case 'data_creator':
        data.data_creator = ParseValue(value, DataType.string) as string;
        break;
      case 'data_updater':
        data.data_updater = ParseValue(value, DataType.string) as string;
        break;
      case 'create_time':
        data.create_time = ParseValue(value, DataType.string) as string;
        break;
      case 'update_time':
        data.update_time = ParseValue(value, DataType.string) as string;
        break;
      case 'user_session_id':
        data.user_session_id = ParseValue(value, DataType.string) as string;
        break;
      case 'speaker_id':
        data.speaker_id = ParseValue(value, DataType.string) as string;
        break;
      case 'original_transcription':
        data.original_transcription = ParseValue(value, DataType.string) as string;
        break;
      case 'statement_timestamp':
        data.statement_timestamp = ParseValue(value, DataType.string) as string;
        break;
      case 'statement_type':
        data.statement_type = ParseValue(value, DataType.enumeration) as DeclarativeStatementStatementType;
        break;
      case 'verification_status':
        data.verification_status = ParseValue(value, DataType.enumeration) as DeclarativeStatementVerificationStatus;
        break;
    }
  }
  
  return data as DeclarativeStatementModel;
}


/**
 * Create index for Id fields
 */
function createIndexId(
  id: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, id, 'id'),
  ];

  return {
    fields: ['id'],
    values
  };
}
/**
 * Create index for DataCreator fields
 */
function createIndexDataCreator(
  data_creator: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, data_creator, 'data_creator'),
  ];

  return {
    fields: ['data_creator'],
    values
  };
}
/**
 * Create index for DataUpdater fields
 */
function createIndexDataUpdater(
  data_updater: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, data_updater, 'data_updater'),
  ];

  return {
    fields: ['data_updater'],
    values
  };
}
/**
 * Create index for UserSessionId fields
 */
function createIndexUserSessionId(
  user_session_id: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, user_session_id, 'user_session_id'),
  ];

  return {
    fields: ['user_session_id'],
    values
  };
}
/**
 * Create index for SpeakerId fields
 */
function createIndexSpeakerId(
  speaker_id: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, speaker_id, 'speaker_id'),
  ];

  return {
    fields: ['speaker_id'],
    values
  };
}
/**
 * Create index for VerificationStatus fields
 */
function createIndexVerificationStatus(
  verification_status: DeclarativeStatementVerificationStatus
): Index {
  const values: Value[] = [
    CreateValue(DataType.enumeration, verification_status, 'verification_status'),
  ];

  return {
    fields: ['verification_status'],
    values
  };
}

export default DeclarativeStatementORM;