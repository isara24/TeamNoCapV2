import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import type { TranscriptionResult } from "@/services/voice-service";

interface TranscriptionDisplayProps {
	transcriptions: TranscriptionResult[];
}

/**
 * Real-time text transcription display using Chroma
 * Shows subtitles generated by Groq
 */
export function TranscriptionDisplay({
	transcriptions,
}: TranscriptionDisplayProps) {
	const getStatementTypeBadgeVariant = (type: string) => {
		switch (type) {
			case "declarative":
				return "default";
			case "opinion":
				return "secondary";
			case "question":
				return "outline";
			default:
				return "outline";
		}
	};

	return (
		<Card className="w-full">
			<CardHeader>
				<CardTitle>Live Transcription</CardTitle>
			</CardHeader>
			<CardContent>
				<ScrollArea className="h-[400px] w-full rounded-md border p-4">
					{transcriptions.length === 0 ? (
						<div className="flex h-full items-center justify-center text-muted-foreground">
							<p>
								No transcriptions yet. Start speaking to see text appear here.
							</p>
						</div>
					) : (
						<div className="space-y-4">
							{transcriptions.map((transcription) => (
								<div
									key={`${transcription.speaker_id}-${transcription.timestamp}`}
									className="rounded-lg border bg-card p-3 shadow-sm transition-all hover:shadow-md"
								>
									<div className="mb-2 flex items-center justify-between">
										<div className="flex items-center gap-2">
											<span className="text-sm font-medium">
												Speaker {transcription.speaker_id}
											</span>
											<Badge
												variant={getStatementTypeBadgeVariant(
													transcription.statementType,
												)}
											>
												{transcription.statementType}
											</Badge>
										</div>
										<span className="text-xs text-muted-foreground">
											{new Date(transcription.timestamp).toLocaleTimeString()}
										</span>
									</div>
									<p className="text-sm">{transcription.text}</p>
									<div className="mt-2 flex items-center gap-2">
										<span className="text-xs text-muted-foreground">
											Confidence: {(transcription.confidence * 100).toFixed(0)}%
										</span>
									</div>
								</div>
							))}
						</div>
					)}
				</ScrollArea>
			</CardContent>
		</Card>
	);
}
